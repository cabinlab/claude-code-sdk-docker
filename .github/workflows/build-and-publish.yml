name: Build and Publish Docker Images

on:
  push:
    branches: [ main ]
    tags: [ 'v*' ]
    paths:
      - 'Dockerfile*'
      - 'scripts/docker-entrypoint.sh'
      - '.github/workflows/build-and-publish.yml'
      - '.dockerignore'
  pull_request:
    branches: [ main ]
    paths:
      - 'Dockerfile*'
      - 'scripts/docker-entrypoint.sh'
      - '.github/workflows/build-and-publish.yml'
      - '.dockerignore'
  workflow_dispatch:
    inputs:
      force_rebuild:
        description: 'Force rebuild all images (ignore path filters)'
        type: boolean
        default: false
      images_to_build:
        description: 'Images to build (comma-separated: typescript,python,alpine,alpine-python or "all")'
        type: string
        default: 'all'

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  changes:
    runs-on: ubuntu-latest
    outputs:
      typescript: ${{ steps.filter.outputs.typescript || steps.manual.outputs.typescript }}
      python: ${{ steps.filter.outputs.python || steps.manual.outputs.python }}
      alpine: ${{ steps.filter.outputs.alpine || steps.manual.outputs.alpine }}
      alpine-python: ${{ steps.filter.outputs.alpine-python || steps.manual.outputs.alpine-python }}
    steps:
      - uses: actions/checkout@v4
      
      - name: Check manual trigger
        id: manual
        if: github.event_name == 'workflow_dispatch'
        run: |
          if [[ "${{ github.event.inputs.force_rebuild }}" == "true" ]] || [[ "${{ github.event.inputs.images_to_build }}" == "all" ]]; then
            echo "typescript=true" >> $GITHUB_OUTPUT
            echo "python=true" >> $GITHUB_OUTPUT
            echo "alpine=true" >> $GITHUB_OUTPUT
            echo "alpine-python=true" >> $GITHUB_OUTPUT
          else
            # Parse comma-separated list
            IFS=',' read -ra IMAGES <<< "${{ github.event.inputs.images_to_build }}"
            for image in "${IMAGES[@]}"; do
              image=$(echo "$image" | xargs) # trim whitespace
              case "$image" in
                "typescript") echo "typescript=true" >> $GITHUB_OUTPUT ;;
                "python") echo "python=true" >> $GITHUB_OUTPUT ;;
                "alpine") echo "alpine=true" >> $GITHUB_OUTPUT ;;
                "alpine-python") echo "alpine-python=true" >> $GITHUB_OUTPUT ;;
              esac
            done
          fi
      
      - uses: dorny/paths-filter@v3
        id: filter
        if: github.event_name != 'workflow_dispatch'
        with:
          filters: |
            typescript:
              - 'Dockerfile.typescript'
              - 'scripts/docker-entrypoint.sh'
              - '.dockerignore'
            python:
              - 'Dockerfile'
              - 'Dockerfile.typescript'
              - 'scripts/docker-entrypoint.sh'
              - '.dockerignore'
            alpine:
              - 'Dockerfile.alpine'
              - 'scripts/docker-entrypoint.sh'
              - '.dockerignore'
            alpine-python:
              - 'Dockerfile.alpine-python'
              - 'Dockerfile.alpine'
              - 'scripts/docker-entrypoint.sh'
              - '.dockerignore'

  build-typescript:
    needs: changes
    if: ${{ needs.changes.outputs.typescript == 'true' }}
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to the Container registry
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=raw,value=typescript,enable={{is_default_branch}}

      - name: Build and push TypeScript image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile.typescript
          platforms: linux/amd64,linux/arm64
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  build-python:
    needs: [changes, build-typescript]
    if: ${{ needs.changes.outputs.python == 'true' && (success() || needs.build-typescript.result == 'skipped') }}
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to the Container registry
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=pr,suffix=-python
            type=semver,pattern={{version}}-python
            type=raw,value=python,enable={{is_default_branch}}

      - name: Build and push Python image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          platforms: linux/amd64,linux/arm64
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          build-args: |
            BASE_IMAGE=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:typescript
          cache-from: type=gha
          cache-to: type=gha,mode=max

  build-alpine:
    needs: changes
    if: ${{ needs.changes.outputs.alpine == 'true' }}
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to the Container registry
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=pr,suffix=-alpine
            type=semver,pattern={{version}}-alpine
            type=raw,value=alpine,enable={{is_default_branch}}

      - name: Build and push Alpine image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile.alpine
          platforms: linux/amd64,linux/arm64
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  build-alpine-python:
    needs: [changes, build-alpine]
    if: ${{ needs.changes.outputs.alpine-python == 'true' && (success() || needs.build-alpine.result == 'skipped') }}
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to the Container registry
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=pr,suffix=-alpine-python
            type=semver,pattern={{version}}-alpine-python
            type=raw,value=alpine-python,enable={{is_default_branch}}

      - name: Build and push Alpine Python image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile.alpine-python
          platforms: linux/amd64,linux/arm64
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          build-args: |
            BASE_IMAGE=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:alpine
          cache-from: type=gha
          cache-to: type=gha,mode=max

  test:
    needs: [changes, build-typescript, build-python, build-alpine, build-alpine-python]
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request' && always()

    strategy:
      matrix:
        image: [typescript, python, alpine, alpine-python]

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Test TypeScript image
        if: matrix.image == 'typescript' && needs.changes.outputs.typescript == 'true' && needs.build-typescript.result == 'success'
        run: |
          # Test basic functionality
          docker run --rm ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:pr-${{ github.event.number }} \
            node --version
          
          # Test Claude CLI is installed
          docker run --rm ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:pr-${{ github.event.number }} \
            claude --version
          
          # Test entrypoint script
          docker run --rm ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:pr-${{ github.event.number }} \
            echo "Container started successfully"

      - name: Test Python image
        if: matrix.image == 'python' && needs.changes.outputs.python == 'true' && needs.build-python.result == 'success'
        run: |
          # Test Python functionality
          docker run --rm ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:pr-${{ github.event.number }}-python \
            python --version
          
          # Test Node.js is also available
          docker run --rm ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:pr-${{ github.event.number }}-python \
            node --version
          
          # Test Claude CLI is installed
          docker run --rm ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:pr-${{ github.event.number }}-python \
            claude --version
          
          # Test Python SDK is installed
          docker run --rm ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:pr-${{ github.event.number }}-python \
            python -c "import claude_code_sdk; print('SDK installed')"

      - name: Test Alpine image
        if: matrix.image == 'alpine' && needs.changes.outputs.alpine == 'true' && needs.build-alpine.result == 'success'
        run: |
          # Test basic functionality
          docker run --rm ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:pr-${{ github.event.number }}-alpine \
            node --version
          
          # Test Claude CLI is installed
          docker run --rm ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:pr-${{ github.event.number }}-alpine \
            claude --version
          
          # Test entrypoint script
          docker run --rm ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:pr-${{ github.event.number }}-alpine \
            echo "Alpine container started successfully"

      - name: Test Alpine Python image
        if: matrix.image == 'alpine-python' && needs.changes.outputs.alpine-python == 'true' && needs.build-alpine-python.result == 'success'
        run: |
          # Test Python functionality
          docker run --rm ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:pr-${{ github.event.number }}-alpine-python \
            python3 --version
          
          # Test Node.js is also available
          docker run --rm ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:pr-${{ github.event.number }}-alpine-python \
            node --version
          
          # Test Claude CLI is installed
          docker run --rm ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:pr-${{ github.event.number }}-alpine-python \
            claude --version
          
          # Test Python SDK is installed
          docker run --rm ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:pr-${{ github.event.number }}-alpine-python \
            python3 -c "import claude_code_sdk; print('Alpine Python SDK installed')"